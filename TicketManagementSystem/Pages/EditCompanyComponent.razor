@page "/editcompany/{companyId}"
@using UseCases.UseCaseInterfaces

@inject NavigationManager NavigationManager
@inject IAddCompanyUseCase AddCompanyUseCase
@inject IGetCompanyByIdUseCase GetCompanyByIdUseCase
@inject IEditCompanyUseCase EditCompanyUseCase

<h3>Edit Company</h3>

@if (company != null)
{
    <EditForm Model = "company" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary> </ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="company.Name" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="company.Description" class="form-control"></InputText>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}


@code {
    [Parameter]
    public string CompanyId { get; set; }

    private Company company;

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(int.TryParse(this.CompanyId,out int ICompanyId))
        {
            this.company = GetCompanyByIdUseCase.Execute(ICompanyId);

            //Following code is supposed to replace above... Doesnt work though.
            //var comp = GetCompanyByIdUseCase.Execute(ICompanyId);
            //var clonedComp = new Company { CompanyId = comp.CompanyId, Name = comp.Name, Description = comp.Description };

        }

    }

    private void OnValidSubmit()
    {
        EditCompanyUseCase.Execute(this.company);
        NavigationManager.NavigateTo("/companies");

    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/companies");
    }

}

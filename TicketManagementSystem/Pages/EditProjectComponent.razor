
@page "/editproject/{projectId}"
@using UseCases.UseCaseInterfaces

@inject NavigationManager NavigationManager
@inject IAddProjectUseCase AddProjectUseCase
@inject IGetProjectByIdUseCase GetProjectByIdUseCase
@inject IEditProjectUseCase EditProjectUseCase

<h3>Edit Project</h3>
<br />
@if (project != null)
{
    <EditForm Model = "project" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary> </ValidationSummary>

        <div class="form-group">
            <label for="name">Company</label>
            <InputText id="name" @bind-Value="project.CompanyId" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="project.Description" class="form-control"></InputText>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}


@code {
    [Parameter]
    public string ProjectId { get; set; }

    private Project project;

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(int.TryParse(this.ProjectId,out int IProjectId))
        {
            this.project = GetProjectByIdUseCase.Execute(IProjectId);

            //Following code is supposed to replace above... Doesnt work though.
            //var comp = GetProjectByIdUseCase.Execute(IProjectId);
            //var clonedComp = new Project { ProjectId = comp.ProjectId, Name = comp.Name, Description = comp.Description };

        }

    }

    private void OnValidSubmit()
    {
        EditProjectUseCase.Execute(this.project);
        NavigationManager.NavigateTo("/companies");

    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/companies");
    }

}
